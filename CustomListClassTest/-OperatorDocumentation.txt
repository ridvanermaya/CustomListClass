Removes the first occurrence of all matching items in the lists.

***
C#
***
    public static CustomClassList<T> operator - (CustomClassList<T> item1, CustomClassList<T> item2);
***

----------
Parameters
    item1 CustomClassList<T>
    item2 CustomClassList<T>
    Creates a new list and adds items to the list that don't match with the items in the second list.
----------

-------
Returns
    CustomClassList<T>
-------

----------
Implements
    -
----------

------
Syntax
    CustomClassList<T> listOne = new CustomClassList<T>
    CustomClassList<T> listTwo = new CustomClassList<T>
    CustomClassList<T> outcome = new CustomClassList<T>
    
    outcome = listOne - listTwo;
------

********
Examples
    Can be applied only same type of lists.
    The following example demonstrates how to add items to lists and use (-) operator.

    using System;

    public class Examples
    {
        public static void Main()
        {
            CustomClassList<int> numbers1 = new CustomClassList<int>();
            numbers1.Add(0);
            numbers1.Add(1);
            numbers1.Add(2);
            numbers1.Add(3);

            foreach(int number in numbers1)
            {
                Console.WriteLine(number);
            }

            CustomClassList<int> numbers2 = new CustomClassList<int>();
            numbers2.Add(1);
            numbers2.Add(3);

            foreach(int number in numbers2)
            {
                Console.WriteLine(number);
            }

            =====   numbers1 - numbers2   =====
            // minus operator instantiates a new CustomClassList with the same type
            // gets the first element of the first item of the list on the left
            // checks if it matches with any element in the right list
            // if no matching element found then it adds the element to outcome list
            // This code returns another list with the same type
            // Let's see the outcome list


            CustomClassList<int> outcome = new CustomClassList<int>();
            outcome = numbers1 - numbers2;

            // outcome list should only include {0, 2}
            // since {1, 3} matche an element in the second list the outcome list won't include these two numbers
            // let's print the outcome list

            foreach(int number in outcome)
            {
                Console.WriteLine(number);
            } 

            // In console, we will see...
            0
            2    

            Example 2

            CustomClassList<string> firstNames = new CustomClassList<string>();
            CustomClassList<string> lastNames = new CustomClassList<string>();
            CustomClassList<string> outcome = new CustomClassList<string>();
            firstNames.Add("RedOne");
            firstNames.Add("Micheal");
            firstNames.Add("Luke");
            firstNames.Add("William");
            lastNames.Add("RedOne");
            lastNames.Add("Luke");
            lastNames.Add("Scott");
            lastNames.Add("John");

            // if we want to remove all items from the firstNames list that matches with items in lastNames list

            outcome = firstNames - lastNames;

            // outcome should include {Micheal, William} since "RedOne" and "Luke" matches with items in lastNames

            foreach(string item in outcome)
            {
                Console.WriteLine(item);
            }

            // In console, we wil see...
            Micheal
            William
        }
    }